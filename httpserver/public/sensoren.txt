 // sending to sender-client only
 socket.emit('message', "this is a test");

 // sending to all clients, include sender
 io.emit('message', "this is a test");

 // sending to all clients except sender
 socket.broadcast.emit('message', "this is a test");

 // sending to all clients in 'game' room(channel) except sender
 socket.broadcast.to('game').emit('message', 'nice game');

 // sending to all clients in 'game' room(channel), include sender
 io.in('game').emit('message', 'cool game');

 // sending to sender client, only if they are in 'game' room(channel)
 socket.to('game').emit('message', 'enjoy the game');

 // sending to all clients in namespace 'myNamespace', include sender
 io.of('myNamespace').emit('message', 'gg');

 // sending to individual socketid
 socket.broadcast.to(socketid).emit('message', 'for your eyes only');




  function newacc(name, email, pw, accr) {
         r.table('user').insert([
             {
                 name: name,
                 email: email,
                 password: pw,
                 accrights: accr,
                 posts: [
                     {title: "Decommissioning speech", content: "The Cylon War is long over..."},
                     {title: "We are at war", content: "Moments ago, this ship received word..."},
                     {title: "The new Earth", content: "The discoveries of the past few days..."}
                 ]
             }
         ]).run(connection, function (err, result) {
             if (err) throw err;
             console.log(JSON.stringify(result, null, 2));
         });
     }
